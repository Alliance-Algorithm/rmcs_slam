param_server:
    ros__parameters:
        name:
            # publish
            grid: "/rmcs_map/map/grid"
            cost: "/rmcs_map/map/cost"
            status: "/rmcs_map/status"
            transformed_map: "/rmcs_map/transformed_map"
            lidar: "/rmcs_slam/cloud_registered_body"
            # other
            node: "rmcs_map"
            # 把地图和雷达的变换统一, 此处默认雷达的点云
            # 已经被纠正到 base link 的正方向距离地面0m处
            frame:
                map: "map_link"
                lidar: "lidar_link"
        # process config
        switch:
            # livox | pointcloud2
            pointcloud_type: "pointcloud2"
            cost_map: false
            grid_map: true
            # 你想要发布点云吗，我可以提供完整点云和
            # 剔除掉地板的点云
            publish_cloud: true
            publish_test: false
        lidar:
            # 单帧点云浮动比较大，多帧累积起来虽然响应会低一些，
            # 但障碍地图会稳定很多
            livox_frames: 1
        segmentation:
            # 点云分割中迭代的最大相邻点的距离
            # 这个距离内的点云被视作统一平面内
            point_distance: 0.1
            # 点云分割中选取的高度
            ground_height: 0.2
        grid:
            # 栅格地图的分辨率
            resolution: 0.2
            # 栅格地图边长
            grid_width: 10.0
            # 雷达的盲区
            lidar_blind: 0.6
            # 一个神秘比例，将实际距离映射为栅格地图
            # 数据的范围
            height_wight: 120.0
        filter:
            # 障碍地图的阈值，大于此值视为障碍物
            # 量纲是由真实高度缩放至 0 -> 127 后求梯度得来的
            threshold: 50
            # 预先膨胀，为了更好的闭合障碍物
            pre_dilate_size: 3
            pre_dilate_times: 0
            # 闭合，拟补激光雷达点云的缺口
            pre_close_size: 2
            pre_close_times: 1
            # 求梯度，可以借此过滤掉坡
            gradient: true
            # 最后膨胀提升容错率
            dilate_size: 1
